// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: nexus/rpc/api/nexusservice/v1/service.proto

package nexusservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NexusService_StartOperation_FullMethodName = "/nexus.rpc.api.nexusservice.v1.NexusService/StartOperation"
)

// NexusServiceClient is the client API for NexusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusServiceClient interface {
	// Start an arbirary length operation.
	// The response of the operation may be delivered synchronously - inline, or asynchronously, via a provided callback.
	StartOperation(ctx context.Context, in *StartOperationRequest, opts ...grpc.CallOption) (*StartOperationResponse, error)
}

type nexusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusServiceClient(cc grpc.ClientConnInterface) NexusServiceClient {
	return &nexusServiceClient{cc}
}

func (c *nexusServiceClient) StartOperation(ctx context.Context, in *StartOperationRequest, opts ...grpc.CallOption) (*StartOperationResponse, error) {
	out := new(StartOperationResponse)
	err := c.cc.Invoke(ctx, NexusService_StartOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusServiceServer is the server API for NexusService service.
// All implementations must embed UnimplementedNexusServiceServer
// for forward compatibility
type NexusServiceServer interface {
	// Start an arbirary length operation.
	// The response of the operation may be delivered synchronously - inline, or asynchronously, via a provided callback.
	StartOperation(context.Context, *StartOperationRequest) (*StartOperationResponse, error)
	mustEmbedUnimplementedNexusServiceServer()
}

// UnimplementedNexusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNexusServiceServer struct {
}

func (UnimplementedNexusServiceServer) StartOperation(context.Context, *StartOperationRequest) (*StartOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOperation not implemented")
}
func (UnimplementedNexusServiceServer) mustEmbedUnimplementedNexusServiceServer() {}

// UnsafeNexusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServiceServer will
// result in compilation errors.
type UnsafeNexusServiceServer interface {
	mustEmbedUnimplementedNexusServiceServer()
}

func RegisterNexusServiceServer(s grpc.ServiceRegistrar, srv NexusServiceServer) {
	s.RegisterService(&NexusService_ServiceDesc, srv)
}

func _NexusService_StartOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).StartOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_StartOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).StartOperation(ctx, req.(*StartOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NexusService_ServiceDesc is the grpc.ServiceDesc for NexusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.rpc.api.nexusservice.v1.NexusService",
	HandlerType: (*NexusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartOperation",
			Handler:    _NexusService_StartOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexus/rpc/api/nexusservice/v1/service.proto",
}
